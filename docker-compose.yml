
volumes:
  lago_postgres_data: null
  lago_redis_data: null
  lago_storage_data: null

# --- Anchor Definitions (Moved to the Top) ---
x-postgres-image: &x-postgres-image
  image: 'postgres:14-alpine'

x-redis-image: &x-redis-image
  image: 'redis:6-alpine'

x-backend-image: &x-backend-image
  image: 'getlago/api:v1.32.4'

x-frontend-image: &x-frontend-image
  image: 'getlago/front:v1.32.4'

x-lago-api-url: &x-lago-api-url
  LAGO_API_URL: '${LAGO_API_URL:-http://localhost:3000}'

x-lago-front-url: &x-lago-front-url
  LAGO_FRONT_URL: '${LAGO_FRONT_URL:-http://localhost}'

x-backend-environment: &x-backend-environment
  DATABASE_URL: 'postgresql://${POSTGRES_USER:-lago}:${POSTGRES_PASSWORD:-changeme}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-lago}?search_path=${POSTGRES_SCHEMA:-public}'
  REDIS_URL: 'redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}'
  REDIS_PASSWORD: '${REDIS_PASSWORD:-}'
  SECRET_KEY_BASE: '${SECRET_KEY_BASE:-your-secret-key-base-hex-64}'
  RAILS_ENV: production
  RAILS_LOG_TO_STDOUT: '${LAGO_RAILS_STDOUT:-true}'
  LAGO_RSA_PRIVATE_KEY: '${LAGO_RSA_PRIVATE_KEY}'
  LAGO_SIDEKIQ_WEB: '${LAGO_SIDEKIQ_WEB:-true}'
  LAGO_ENCRYPTION_PRIMARY_KEY: '${LAGO_ENCRYPTION_PRIMARY_KEY:-your-encryption-primary-key}'
  LAGO_ENCRYPTION_DETERMINISTIC_KEY: '${LAGO_ENCRYPTION_DETERMINISTIC_KEY:-your-encryption-deterministic-key}'
  LAGO_ENCRYPTION_KEY_DERIVATION_SALT: '${LAGO_ENCRYPTION_KEY_DERIVATION_SALT:-your-encryption-derivation-salt}'
  LAGO_USE_AWS_S3: '${LAGO_USE_AWS_S3:-false}'
  LAGO_AWS_S3_ACCESS_KEY_ID: '${LAGO_AWS_S3_ACCESS_KEY_ID:-azerty123456}'
  LAGO_AWS_S3_SECRET_ACCESS_KEY: '${LAGO_AWS_S3_SECRET_ACCESS_KEY:-azerty123456}'
  LAGO_AWS_S3_REGION: '${LAGO_AWS_S3_REGION:-us-east-1}'
  LAGO_AWS_S3_BUCKET: '${LAGO_AWS_S3_BUCKET:-bucket}'
  LAGO_AWS_S3_ENDPOINT: '${LAGO_AWS_S3_ENDPOINT}'
  LAGO_USE_GCS: '${LAGO_USE_GCS:-false}'
  LAGO_GCS_PROJECT: '${LAGO_GCS_PROJECT:-}'
  LAGO_GCS_BUCKET: '${LAGO_GCS_BUCKET:-}'
  LAGO_FROM_EMAIL: '${LAGO_FROM_EMAIL:-}'
  LAGO_SMTP_ADDRESS: '${LAGO_SMTP_ADDRESS:-}'
  LAGO_SMTP_PORT: '${LAGO_SMTP_PORT:-587}'
  LAGO_SMTP_USERNAME: '${LAGO_SMTP_USERNAME:-}'
  LAGO_SMTP_PASSWORD: '${LAGO_SMTP_PASSWORD:-}'
  LAGO_PDF_URL: '${LAGO_PDF_URL:-http://pdf:3000}'
  LAGO_DATA_API_URL: '${LAGO_DATA_API_URL:-http://data-api}'
  LAGO_DATA_API_BEARER_TOKEN: '${LAGO_DATA_API_BEARER_TOKEN:-}'
  LAGO_REDIS_CACHE_URL: 'redis://${LAGO_REDIS_CACHE_HOST:-redis}:${LAGO_REDIS_CACHE_PORT:-6379}'
  LAGO_REDIS_CACHE_PASSWORD: '${LAGO_REDIS_CACHE_PASSWORD}'
  LAGO_DISABLE_SEGMENT: '${LAGO_DISABLE_SEGMENT}'
  LAGO_DISABLE_WALLET_REFRESH: '${LAGO_DISABLE_WALLET_REFRESH}'
  LAGO_DISABLE_SIGNUP: '${LAGO_DISABLE_SIGNUP:-false}'
  LAGO_DISABLE_PDF_GENERATION: '${LAGO_DISABLE_PDF_GENERATION:-false}'
  LAGO_OAUTH_PROXY_URL: 'https://proxy.getlago.com'
  LAGO_LICENSE: '${LAGO_LICENSE:-}'
  LAGO_CREATE_ORG: '${LAGO_CREATE_ORG:-false}'
  LAGO_ORG_USER_PASSWORD: '${LAGO_ORG_USER_PASSWORD:-}'
  LAGO_ORG_USER_EMAIL: '${LAGO_ORG_USER_EMAIL:-}'
  LAGO_ORG_NAME: '${LAGO_ORG_NAME:-}'
  LAGO_ORG_API_KEY: '${LAGO_ORG_API_KEY:-}'
  GOOGLE_AUTH_CLIENT_ID: '${GOOGLE_AUTH_CLIENT_ID:-}'
  GOOGLE_AUTH_CLIENT_SECRET: '${GOOGLE_AUTH_CLIENT_SECRET:-}'

x-frontend-environment: &x-frontend-environment
  API_URL: '${LAGO_API_URL:-http://localhost:3000}'
  APP_ENV: production
  LAGO_OAUTH_PROXY_URL: 'https://proxy.getlago.com'
  LAGO_DISABLE_PDF_GENERATION: '${LAGO_DISABLE_PDF_GENERATION:-false}'

# --- Service Definitions ---
services:
  db:
    image: 'postgres:14-alpine'
    container_name: lago-db
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -U ${POSTGRES_USER:-lago} -d ${POSTGRES_DB:-lago} -h localhost -p ${POSTGRES_PORT:-5432}'
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: '${POSTGRES_DB:-lago}'
      POSTGRES_USER: '${POSTGRES_USER:-lago}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-changeme}'
      PGDATA: /data/postgres
      PGPORT: '${POSTGRES_PORT:-5432}'
      POSTGRES_SCHEMA: public
    volumes:
      - 'lago_postgres_data:/data/postgres'
    ports:
      - "5433:5432"
  redis:
    image: 'redis:6-alpine'
    container_name: lago-redis
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - redis-cli
        - '-p'
        - '${REDIS_PORT:-6379}'
        - ping
      interval: 10s
      timeout: 5s
      retries: 5
    command: '--port ${REDIS_PORT:-6379}'
    volumes:
      - 'lago_redis_data:/data'
    ports:
      - "6380:6379"
  migrate:
    image: 'getlago/api:v1.32.4'
    container_name: lago-migrate
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command:
      - ./scripts/migrate.sh
    environment:
      <<: *x-backend-environment
      <<: *x-lago-api-url
      <<: *x-lago-front-url
  api:
    image: 'getlago/api:v1.32.4'
    container_name: lago-api
    restart: unless-stopped
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    command:
      - ./scripts/start.api.sh
    healthcheck:
      test: 'curl -f http://localhost:3000/health || exit 1'
      interval: 10s
      start_period: 30s
      timeout: 60s
      start_interval: 2s
    environment:
      <<: *x-backend-environment
      <<: *x-lago-api-url
      <<: *x-lago-front-url
    volumes:
      - 'lago_storage_data:/app/storage'
    ports:
      - "8881:3000"
  front:
    image: 'getlago/front:v1.32.4'
    container_name: lago-front
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
        restart: true
    environment:
      <<: *x-frontend-environment
      <<: *x-lago-api-url
      <<: *x-lago-front-url
    ports:
      - "8880:80"
  api-worker:
    image: 'getlago/api:v1.32.4'
    container_name: lago-worker
    restart: unless-stopped
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    command:
      - ./scripts/start.worker.sh
    healthcheck:
      test: 'curl -f http://localhost:8080 || exit 1'
      interval: 10s
      start_period: 30s
      timeout: 60s
      start_interval: 2s
    environment:
      <<: *x-backend-environment
      <<: *x-lago-api-url
      <<: *x-lago-front-url
    volumes:
      - 'lago_storage_data:/app/storage'
  api-clock:
    image: 'getlago/api:v1.32.4'
    container_name: lago-clock
    restart: unless-stopped
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    command:
      - ./scripts/start.clock.sh
    environment:
      <<: *x-backend-environment
      <<: *x-lago-api-url
      <<: *x-lago-front-url
  pdf:
    image: 'getlago/lago-gotenberg:7.8.2'
    container_name: lago-pdf-generator
